package com.lnt.services;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.Arrays;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.ModelAndView;

@RestController
public class SearchMicroServices {

	private String searchString;
	private final RestTemplate restTemplate;
	private Map<String, String[]> map;
	private String urlFromProps;

	public SearchMicroServices(RestTemplateBuilder builder) {
		System.out.println("SearchMicroServices.SearchMicroServices() name ");
		this.restTemplate = builder.build();
	}

	@Autowired
	public ProjectDetails bean;

	@RequestMapping("projectName")
	String getProjectName() {
		urlFromProps = "http://" + bean.getCmdcIpAddress() + ":" + bean.getCmdcServerPortNumber() + "/cmdc/content";
		System.out.println(urlFromProps);
		return bean.getProjectName() + " CMDC server Ip " + bean.getCmdcIpAddress() + " and port number  "
				+ bean.getCmdcServerPortNumber();
	}

	@RequestMapping("/cmdc/region/24833/catalogueId")
	public String getCatlogId() {
		String catlogid = null;

		String url = "http://10.126.53.144:8085/cmdc/region/24833/catalogueId?version=HD_PDL";
		URI uri2 = null;
		try {
			uri2 = new URI(url);
			System.out.println(uri2.isAbsolute());
			System.out.println("cmdc URI  " + uri2);
		} catch (URISyntaxException e) {
			e.printStackTrace();
		}

		String string = null;
		try {
			catlogid = restTemplate.getForObject(uri2, String.class);
			System.out.println("@@@@@@@@@@@@@@@@@@@@@@  CMDC  @@@@@@@@@@@@@@@@@@@@@@2");
			System.out.println(string);
		} catch (Exception e) {
			e.printStackTrace();
			string = null;

		}

		return catlogid;
	}

	@RequestMapping("cmdc/content")
	public RootJson getSearchResult(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {
		RootJson json = new RootJson();
		String url = httpServletRequest.getRequestURI();
		map = httpServletRequest.getParameterMap();
		String qString = httpServletRequest.getQueryString();
		StringBuffer urlString = httpServletRequest.getRequestURL();
		System.out.println("Query String " + qString);
		System.out.println("Requestd Url " + urlString);
		System.out.println("Request URI " + url);
		getProjectName();
		System.out.println("CMDC URL from props " + urlFromProps);
		// urlString = new StringBuffer("http://10.126.53.144:8085/cmdc/content");
		urlString = new StringBuffer(urlFromProps);
		String searchUrl = getSearchURL(urlString, qString);
		System.out.println("search Url  " + searchUrl);
		searchString = getSearchString(map);
		System.out.println("search string " + searchString);
		json = getSearchResults(searchUrl, searchString);
		return json;
	}

	private String getSearchString(Map map) {
		String searchString = null;
		Set s = map.entrySet();
		Iterator it = s.iterator();
		while (it.hasNext()) {
			Map.Entry<String, String[]> entry = (Map.Entry<String, String[]>) it.next();
			String key = entry.getKey();
			String[] value = entry.getValue();
			// System.out.println("Key is " + key + " -->" + value);

			for (int j = 0; j < value.length; j++) {
				// System.out.println("Q value " + value[j]);
				if (value[j].contains("sortTitle")) {
					String[] str = value[j].split(",");
					// System.out.println("su " + str.length);
					if (str.length > 1) {
						for (int i = 0; i < str.length; i++) {
							// System.out.println("Sunil " + str[i]);
							if (str[i].contains("sortTitle~")) {
								searchString = str[i].substring(str[i].indexOf('~') + 1);
								System.out.println("---");
							}
						}
					}

				}
			}
		}
		return searchString;

	}

	private RootJson getSearchResults(String url, String searchString) {
		RootJson rootJson = new RootJson();
		// String uri =
		// "http://10.126.53.144:8085/cmdc/content?region=24833&currency=ILS&catalogueId=12&filter=catchUp~false&filter=restart~false&isPurchasable&hasParentGroup=false&filter=source~vod&filter=source~group&parentalRating=13&collapse=false&lang=eng&count=30&q=title,cast~test&sort=%2btitle&pset=Group1";
		String uri = null;
		if (searchString != null)
			uri = "http://localhost:8090/searchYouTube/" + searchString;
		else
			uri = "http://localhost:8090/searchYouTube";

		System.out.println("search URl for YouTube " + uri);
		RootJson youtubResult = null;
		try {
			youtubResult = restTemplate.getForObject(uri, RootJson.class);
			System.out.println("@@@@@@@@@@@@@@@ YOUTUBE @@@@@@@@@@@@@@@@@@@@");
			// System.out.println(youtubResult);
		} catch (Exception e) {
			e.printStackTrace();
			youtubResult = null;

		}



		uri = url;
		URI uri2 = null;
		System.out.println("search url  for CMDC " + url);
		try {
			uri2 = new URI(url);
			System.out.println(uri2.isAbsolute());
			System.out.println("cmdc URI  " + uri2);
		} catch (URISyntaxException e) {
			e.printStackTrace();
		}

		RootJson cmdcResult = null;
		try {
			cmdcResult = restTemplate.getForObject(uri2, RootJson.class);
			System.out.println("@@@@@@@@@@@@@@@@@@@@@@  CMDC  @@@@@@@@@@@@@@@@@@@@@@2");
			// System.out.println(cmdcResult);
		} catch (Exception e) {
			String erorrMessage = e.getMessage();
			if (erorrMessage.equals("404 Not Found"))
				;
			{

			}
			e.printStackTrace();
			cmdcResult = null;

		}

		/*
		 * if (youtubResult != null && cmdcResult != null) { Header commmonHeader = new
		 * Header(); commmonHeader.setTotal(cmdcResult.getHeader().getTotal() +
		 * youtubResult.getHeader().getTotal()); String commonError =
		 * cmdcResult.getError(); int cLen = cmdcResult.getContents().length; int yLen =
		 * youtubResult.getContents().length; System.out.println(" cLen " + cLen +
		 * " yLen " + yLen); Contents contents[] = new Contents[cLen + yLen];
		 * System.arraycopy(youtubResult.getContents(), 0, contents, 0, yLen);
		 * System.arraycopy(cmdcResult.getContents(), 0, contents, yLen, cLen);
		 * System.out.println(" $$$$$$$$$$$  " + Arrays.toString(contents)); RootJson
		 * finalJson = new RootJson(); finalJson.setFacets(null);
		 * finalJson.setContents(contents); finalJson.setError(commonError);
		 * finalJson.setHeader(commmonHeader); System.out.println(
		 * "##########################################################################3"
		 * ); // System.out.println(finalJson); return finalJson; } else if
		 * (youtubResult == null && cmdcResult != null) { return rootJson = cmdcResult;
		 * } else if (cmdcResult == null && youtubResult != null) { return rootJson =
		 * youtubResult; }
		 */
		rootJson =youtubResult;
		
		return rootJson;

	}

	public ModelAndView method(String projectUrl) {
		return new ModelAndView("redirect:" + projectUrl);
	}

	private String getSearchURL(StringBuffer url, String queryString) {
		String searchUrl = null;

		if (queryString != null)
			searchUrl = url + "?" + queryString;
		else
			searchUrl = new String(url);

		return searchUrl;
	}

}
